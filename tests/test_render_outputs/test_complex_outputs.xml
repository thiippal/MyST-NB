<document source="complex_outputs">
    <CellNode cell_type="code" classes="cell">
        <CellInputNode classes="cell_input">
            <literal_block language="ipython3" linenos="False" xml:space="preserve">
                import matplotlib.pyplot as plt
                import pandas as pd
                pd.set_option('display.latex.repr', True)
                import sympy as sym
                sym.init_printing(use_latex=True)
                import numpy as np
                from IPython.display import Image, Latex
    <section classes="tex2jax_ignore mathjax_ignore" ids="markdown" names="markdown">
        <title>
            Markdown
        <section ids="general" names="general">
            <title>
                General
            <paragraph>
                Some markdown text.
            <paragraph>
                A list:
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>
                        something
                <list_item>
                    <paragraph>
                        something else
            <paragraph>
                A numbered list
            <enumerated_list enumtype="arabic" prefix="" suffix=".">
                <list_item>
                    <paragraph>
                        something
                <list_item>
                    <paragraph>
                        something else
            <paragraph>
                non-ascii characters TODO
            <paragraph>
                This is a long section of text, which we only want in a document (not a presentation)
                
                some text
                
                some more text
                
                some more text
                
                some more text
                
                some more text
                
                some more text
                
                some more text
                
                some more text
                
                some more text
            <paragraph>
                This is an abbreviated section of the document text, which we only want in a presentation
            <bullet_list bullet="-">
                <list_item>
                    <paragraph>
                        summary of document text
        <section ids="references-and-citations" names="references\ and\ citations">
            <title>
                References and Citations
            <paragraph>
                References to \cref{fig:example}, \cref{tbl:example}, =@eqn:example_sympy and \cref{code:example_mpl}.
            <paragraph>
                A latex citation.\cite{zelenyak_molecular_2016}
            <paragraph>
                A html citation.
                <raw format="html" xml:space="preserve">
                    <cite data-cite="kirkeminde_thermodynamic_2012">
                (Kirkeminde, 2012)
                <raw format="html" xml:space="preserve">
                    </cite>
        <section ids="todo-notes" names="todo\ notes">
            <title>
                Todo notes
            <paragraph>
                \todo[inline]{an inline todo}
            <paragraph>
                Some text.\todo{a todo in the margins}
    <section classes="tex2jax_ignore mathjax_ignore" ids="text-output" names="text\ output">
        <title>
            Text Output
        <CellNode cell_type="code" classes="cell">
            <CellInputNode classes="cell_input">
                <literal_block language="ipython3" linenos="False" xml:space="preserve">
                    print("""
                    This is some printed text,
                    with a nicely formatted output.
                    """)
            <CellOutputNode classes="cell_output">
                <literal_block classes="output stream" language="myst-ansi" linenos="False" xml:space="preserve">
                    
                    This is some printed text,
                    with a nicely formatted output.
                    
    <section classes="tex2jax_ignore mathjax_ignore" ids="images-and-figures" names="images\ and\ figures">
        <title>
            Images and Figures
        <CellNode cell_type="code" classes="cell">
            <CellInputNode classes="cell_input">
                <literal_block language="ipython3" linenos="False" xml:space="preserve">
                    Image('example.jpg',height=400)
            <CellOutputNode classes="cell_output">
                <image candidates="{'*': '_build/jupyter_execute/complex_outputs_13_0.jpg'}" uri="_build/jupyter_execute/complex_outputs_13_0.jpg">
        <section ids="displaying-a-plot-with-its-code" names="displaying\ a\ plot\ with\ its\ code">
            <title>
                Displaying a plot with its code
            <paragraph>
                A matplotlib figure, with the caption set in the markdowncell above the figure.
            <paragraph>
                The plotting code for a matplotlib figure (\cref{fig:example_mpl}).
            <CellNode cell_type="code" classes="cell">
                <CellInputNode classes="cell_input">
                    <literal_block language="ipython3" linenos="False" xml:space="preserve">
                        plt.scatter(np.random.rand(10), np.random.rand(10), 
                                    label='data label')
                        plt.ylabel(r'a y label with latex $\alpha$')
                        plt.legend();
                <CellOutputNode classes="cell_output">
                    <image candidates="{'*': '_build/jupyter_execute/complex_outputs_17_0.png'}" uri="_build/jupyter_execute/complex_outputs_17_0.png">
    <section classes="tex2jax_ignore mathjax_ignore" ids="tables-with-pandas" names="tables\ (with\ pandas)">
        <title>
            Tables (with pandas)
        <paragraph>
            The plotting code for a pandas Dataframe table (\cref{tbl:example}).
        <CellNode cell_type="code" classes="cell">
            <CellInputNode classes="cell_input">
                <literal_block language="ipython3" linenos="False" xml:space="preserve">
                    df = pd.DataFrame(np.random.rand(3,4),columns=['a','b','c','d'])
                    df.a = ['$\delta$','x','y']
                    df.b = ['l','m','n']
                    df.set_index(['a','b'])
                    df.round(3)
            <CellOutputNode classes="cell_output">
                <raw classes="output text_html" format="html" xml:space="preserve">
                    <div>
                    <style scoped>
                        .dataframe tbody tr th:only-of-type {
                            vertical-align: middle;
                        }
                    
                        .dataframe tbody tr th {
                            vertical-align: top;
                        }
                    
                        .dataframe thead th {
                            text-align: right;
                        }
                    </style>
                    <table border="1" class="dataframe">
                      <thead>
                        <tr style="text-align: right;">
                          <th></th>
                          <th>a</th>
                          <th>b</th>
                          <th>c</th>
                          <th>d</th>
                        </tr>
                      </thead>
                      <tbody>
                        <tr>
                          <th>0</th>
                          <td>$\delta$</td>
                          <td>l</td>
                          <td>0.391</td>
                          <td>0.607</td>
                        </tr>
                        <tr>
                          <th>1</th>
                          <td>x</td>
                          <td>m</td>
                          <td>0.132</td>
                          <td>0.205</td>
                        </tr>
                        <tr>
                          <th>2</th>
                          <td>y</td>
                          <td>n</td>
                          <td>0.969</td>
                          <td>0.726</td>
                        </tr>
                      </tbody>
                    </table>
                    </div>
    <section classes="tex2jax_ignore mathjax_ignore" ids="equations-with-ipython-or-sympy" names="equations\ (with\ ipython\ or\ sympy)">
        <title>
            Equations (with ipython or sympy)
        <CellNode cell_type="code" classes="cell">
            <CellInputNode classes="cell_input">
                <literal_block language="ipython3" linenos="False" xml:space="preserve">
                    Latex('$$ a = b+c $$')
            <CellOutputNode classes="cell_output">
                <math_block classes="output text_latex" nowrap="False" number="True" xml:space="preserve">
                     a = b+c 
        <paragraph>
            The plotting code for a sympy equation (=@eqn:example_sympy).
        <CellNode cell_type="code" classes="cell">
            <CellInputNode classes="cell_input">
                <literal_block language="ipython3" linenos="False" xml:space="preserve">
                    y = sym.Function('y')
                    n = sym.symbols(r'\alpha')
                    f = y(n)-2*y(n-1/sym.pi)-5*y(n-2)
                    sym.rsolve(f,y(n),[1,4])
            <CellOutputNode classes="cell_output">
                <image candidates="{'*': '_build/jupyter_execute/complex_outputs_24_0.png'}" uri="_build/jupyter_execute/complex_outputs_24_0.png">
        <CellNode cell_type="code" classes="cell">
            <CellInputNode classes="cell_input">
                <literal_block language="ipython3" linenos="False" xml:space="preserve">
                    from IPython.display import display, Markdown
                    display(Markdown('**_some_ markdown**'))
            <CellOutputNode classes="cell_output">
                <paragraph>
                    <strong>
                        <emphasis>
                            some
                         markdown
